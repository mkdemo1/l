mport java.util.Scanner;

class Process {
    int id;
    int burstTime;
    int priority;

    public Process(int id, int burstTime, int priority) {
        this.id = id;
        this.burstTime = burstTime;
        this.priority = priority;
    }
}

public class PriorityScheduling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        Process[] processes = new Process[numProcesses];

        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter burst time for Process " + (i + 1) + ": ");
            int burstTime = scanner.nextInt();
            System.out.print("Enter priority for Process " + (i + 1) + ": ");
            int priority = scanner.nextInt();
            processes[i] = new Process(i + 1, burstTime, priority);
        }

        // Sort processes by priority (lower number indicates higher priority)
        for (int i = 0; i < numProcesses - 1; i++) {
            for (int j = 0; j < numProcesses - i - 1; j++) {
                if (processes[j].priority > processes[j + 1].priority) {
                    Process temp = processes[j];
                    processes[j] = processes[j + 1];
                    processes[j + 1] = temp;
                }
            }
        }

        int currentTime = 0;
        int totalWaitingTime = 0;

        System.out.println("\nProcess\tBurst Time\tPriority\tWaiting Time\tTurnaround Time");

        for (Process process : processes) {
            int waitingTime = currentTime;
            int turnaroundTime = waitingTime + process.burstTime;
            System.out.println(
                "P" + process.id + "\t\t" + process.burstTime + "\t\t" + process.priority + "\t\t" + waitingTime + "\t\t" + turnaroundTime
            );
            totalWaitingTime += waitingTime;
            currentTime += process.burstTime;
        }

        double averageWaitingTime = (double) totalWaitingTime / numProcesses;
        System.out.println("\nAverage Waiting Time: " + averageWaitingTime);

        scanner.close();
    }
}