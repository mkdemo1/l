Design suitable Data structures and implement Pass-I and Pass-II of a two-pass assembler for
pseudo-machine. Implementation should consist of a few instructions from each category and
few assembler directives. The output of Pass-I (intermediate code file and symbol table) should
be input for Pass-II.


Pass-I (Assembler Pass I):
import java.io.*;
import java.util.HashMap;
import java.util.Map;

class PassIAssembler {
    public static void main(String[] args) {
        try {
            BufferedReader br = new BufferedReader(new FileReader("input.asm"));
            BufferedWriter icFile = new BufferedWriter(new FileWriter("intermediate_code.txt"));
            BufferedWriter symTableFile = new BufferedWriter(new FileWriter("symbol_table.txt"));

            Map<String, Integer> symbolTable = new HashMap<>();
            int locationCounter = 0;

            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();

                if (line.isEmpty() || line.startsWith("//")) {
                    continue; // Ignore empty lines and comments
                }

                String[] tokens = line.split("\\s+");

                if (tokens[0].equalsIgnoreCase("START")) {
                    locationCounter = Integer.parseInt(tokens[1]);
                    icFile.write(locationCounter + "\t(AD, 01)"); // Assuming AD 01 for START
                    icFile.newLine();
                } else if (tokens[0].equalsIgnoreCase("DS")) {
                    String symbol = tokens[1];
                    int size = Integer.parseInt(tokens[2]);
                    symbolTable.put(symbol, locationCounter);
                    locationCounter += size;
                } else if (tokens[0].equalsIgnoreCase("DC")) {
                    String symbol = tokens[1];
                    int value = Integer.parseInt(tokens[2]);
                    symbolTable.put(symbol, locationCounter);
                    locationCounter++;
                } else {
                    String mnemonic = tokens[0];
                    icFile.write(locationCounter + "\t(IS, " + getOpcode(mnemonic) + ")");
                    for (int i = 1; i < tokens.length; i++) {
                        if (tokens[i].startsWith("=")) {
                            icFile.write("\t(L, " + tokens[i].substring(1) + ")");
                        } else if (symbolTable.containsKey(tokens[i])) {
                            icFile.write("\t(S, " + symbolTable.get(tokens[i]) + ")");
                        } else {
                            icFile.write("\t(C, " + tokens[i] + ")");
                        }
                    }
                    icFile.newLine();
                    locationCounter++;
                }
            }

            br.close();
            icFile.close();

            for (Map.Entry<String, Integer> entry : symbolTable.entrySet()) {
                symTableFile.write(entry.getKey() + "\t" + entry.getValue());
                symTableFile.newLine();
            }
            symTableFile.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String getOpcode(String mnemonic) {
        // Implement a mapping of mnemonics to opcodes
        // Example: MOV -> 01, ADD -> 02, ...
        // Add your mappings here
        return "00";
    }
}


Pass-II (Assembler Pass II):

import java.io.*;
import java.util.HashMap;
import java.util.Map;

class PassIIAssembler {
    public static void main(String[] args) {
        try {
            BufferedReader br = new BufferedReader(new FileReader("intermediate_code.txt"));
            BufferedWriter machineCodeFile = new BufferedWriter(new FileWriter("machine_code.txt"));

            Map<String, String> opcodeTable = new HashMap<>();
            // Fill the opcodeTable with opcodes for instructions

            String line;
            while ((line = br.readLine()) != null) {
                String[] tokens = line.split("\t");
                int locationCounter = Integer.parseInt(tokens[0]);
                String operationType = tokens[1].substring(1, 3);
                String operationCode = opcodeTable.get(operationType);

                machineCodeFile.write(locationCounter + "\t" + operationCode);
                for (int i = 2; i < tokens.length; i++) {
                    String[] tokenParts = tokens[i].split(", ");
                    String addressingMode = tokenParts[0].substring(1);
                    String value = tokenParts[1].substring(1);
                    machineCodeFile.write("\t" + addressingMode + "\t" + value);
                }
                machineCodeFile.newLine();
            }

            br.close();
            machineCodeFile.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
